__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _class,
        _temp,
        _jsxFileName = "/home/trocatudo/sales-force-feup/sales-force-feup/views/NewTask.js";

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _utils = _require(_dependencyMap[3], "../utils/utils");

    var _tcombFormNative = _require(_dependencyMap[4], "tcomb-form-native");

    var _tcombFormNative2 = _interopRequireDefault(_tcombFormNative);

    var _moment = _require(_dependencyMap[5], "moment");

    var _moment2 = _interopRequireDefault(_moment);

    var _tasks = _require(_dependencyMap[6], "../network/tasks");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        NewTask: {
            displayName: "NewTask"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/trocatudo/sales-force-feup/sales-force-feup/views/NewTask.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Form = _tcombFormNative2.default.form.Form;

    var NewTaskForm = _tcombFormNative2.default.struct({
        name: _tcombFormNative2.default.String,
        date: _tcombFormNative2.default.Date,
        time: _tcombFormNative2.default.Date,
        details: _tcombFormNative2.default.String
    });

    var options = {
        fields: {
            name: {
                error: 'Insert a valid name for the new task'
            },
            date: {
                mode: 'date',
                config: {
                    format: function format(date) {
                        return (0, _moment2.default)(date).format("dddd, D MMMM YYYY");
                    }
                }
            },
            time: {
                mode: 'time',
                config: {
                    format: function format(date) {
                        return (0, _moment2.default)(date).format("HH:mm");
                    },
                    defaultValueText: "Tap here to select the time"
                }
            }
        }
    };

    var NewTask = _wrapComponent("NewTask")((_temp = _class = function (_React$Component) {
        _inherits(NewTask, _React$Component);

        function NewTask(props) {
            var _this2 = this;

            _classCallCheck(this, NewTask);

            var _this = _possibleConstructorReturn(this, (NewTask.__proto__ || Object.getPrototypeOf(NewTask)).call(this, props));

            _this.submitNewTask = function _callee() {
                var value, body, taskTime;
                return regeneratorRuntime.async(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                value = _this.refs.form.getValue();

                                if (!value) {
                                    _context.next = 11;
                                    break;
                                }

                                body = {};
                                body.name = value.name;
                                taskTime = (0, _moment2.default)(value.date).format("YYYY-MM-D") + (0, _moment2.default)(value.time).format(" HH:mm:00");
                                body.date = (0, _moment2.default)(taskTime).format("X");
                                body.details = value.details;
                                _context.next = 9;
                                return regeneratorRuntime.awrap((0, _tasks.fetchNewTask)(body));

                            case 9:
                                _this.props.navigation.getParam("updateTasks")();

                                _this.props.navigation.pop();

                            case 11:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, null, _this2);
            };

            _this.submitNewTask = _this.submitNewTask.bind(_this);
            return _this;
        }

        _createClass(NewTask, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 58
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.ScrollView,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 59
                            }
                        },
                        _react3.default.createElement(Form, {
                            ref: "form",
                            type: NewTaskForm,
                            options: options,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 60
                            }
                        }),
                        _react3.default.createElement(_reactNative.Button, {
                            style: styles.submitButton,
                            title: "Submit",
                            color: _utils.ColorTheme.lightGreen,
                            onPress: this.submitNewTask,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 65
                            }
                        })
                    )
                );
            }
        }]);

        return NewTask;
    }(_react3.default.Component), _class.navigationOptions = function (_ref) {
        var navigation = _ref.navigation;
        return {
            headerTitle: _react3.default.createElement(
                _reactNative.Text,
                {
                    style: _utils.Styles.header.title,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 50
                    }
                },
                "New Task"
            )
        };
    }, _temp));

    exports.default = NewTask;

    var styles = _reactNative.StyleSheet.create({
        container: {
            justifyContent: 'center',
            marginTop: 10,
            padding: 20,
            backgroundColor: '#ffffff'
        }
    });
});