__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/trocatudo/sales-force-feup/sales-force-feup/views/Tasks.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactRedux = _require(_dependencyMap[3], "react-redux");

  var _Ionicons = _require(_dependencyMap[4], "@expo/vector-icons/Ionicons");

  var _Ionicons2 = _interopRequireDefault(_Ionicons);

  var _utils = _require(_dependencyMap[5], "../utils/utils");

  var _reactNavigationDrawer = _require(_dependencyMap[6], "react-navigation-drawer");

  var _moment = _require(_dependencyMap[7], "moment");

  var _moment2 = _interopRequireDefault(_moment);

  var _tasks = _require(_dependencyMap[8], "../network/tasks");

  var _actions = _require(_dependencyMap[9], "../redux/actions");

  var _reactNativeSwipeout = _require(_dependencyMap[10], "react-native-swipeout");

  var _reactNativeSwipeout2 = _interopRequireDefault(_reactNativeSwipeout);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Tasks: {
      displayName: "Tasks"
    },
    TaskItemView: {
      displayName: "TaskItemView"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/trocatudo/sales-force-feup/sales-force-feup/views/Tasks.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Tasks = _wrapComponent("Tasks")((_temp = _class = function (_React$Component) {
    _inherits(Tasks, _React$Component);

    function Tasks(props) {
      var _this2 = this;

      _classCallCheck(this, Tasks);

      var _this = _possibleConstructorReturn(this, (Tasks.__proto__ || Object.getPrototypeOf(Tasks)).call(this, props));

      _this.fetchTasks = function _callee() {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap((0, _tasks.fetchTasks)());

              case 2:
                tasks = _context.sent;

                _this.props.updateTasks(tasks.body);

                nextTask = _this.calculateNextTask();

                _this.setState(function () {
                  return {
                    tasksLoading: [],
                    nextTask: nextTask
                  };
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      };

      _this.calculateNextTask = function () {
        if (_this.props.tasks.length == 0) return;

        var currentSecs = _utils.DateUtils.getCurrentEpochSecs();

        var difference = 0;
        var nextTask = -1;

        for (var i = 0; i < _this.props.tasks.length; i++) {
          nextDiff = currentSecs - _this.props.tasks[i].date;

          if (nextDiff <= 0) {
            nextTask = i;
            break;
          }
        }

        return nextTask;
      };

      _this.updateTask = function _callee2(item, index) {
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this.setTaskLoading(index);

                completed = item.completed == "1" ? "0" : "1";
                _context2.next = 4;
                return regeneratorRuntime.awrap((0, _tasks.updateTask)(item.id, completed));

              case 4:
                _this.fetchTasks();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this2);
      };

      _this.deleteTask = function _callee3(item, index) {
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this.setTaskLoading(index);

                _context3.next = 3;
                return regeneratorRuntime.awrap((0, _tasks.deleteTask)(item.id));

              case 3:
                _this.fetchTasks();

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this2);
      };

      _this.setTaskLoading = function (index) {
        _this.setState(function (prevState) {
          newTasksLoading = prevState.tasksLoading.slice();
          newTasksLoading.push(index);
          return {
            tasksLoading: newTasksLoading
          };
        });
      };

      _this.props.tasks = [];
      _this.state = {
        tasksLoading: [],
        nextTask: -1
      };
      return _this;
    }

    _createClass(Tasks, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.fetchTasks();
        this.props.navigation.setParams({
          updateTasks: this.fetchTasks
        });
        this.props.navigation.setParams({
          user: this.props.user.username
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: _utils.Styles.tasks.mainView,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            }
          },
          _react3.default.createElement(_reactNative.FlatList, {
            data: this.props.tasks,
            extraData: this.state.tasksLoading,
            renderItem: function renderItem(_ref) {
              var item = _ref.item,
                  index = _ref.index;
              loadingItem = false;
              if (_this3.state.tasksLoading.includes(index)) loadingItem = true;
              return _react3.default.createElement(TaskItemView, {
                updateTask: _this3.updateTask,
                nextTask: _this3.state.nextTask,
                deleteTask: _this3.deleteTask,
                index: index,
                loading: loadingItem,
                item: item,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 83
                }
              });
            },
            keyExtractor: function keyExtractor(item, index) {
              return index.toString();
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 73
            }
          })
        );
      }
    }]);

    return Tasks;
  }(_react3.default.Component), _class.navigationOptions = function (_ref2) {
    var navigation = _ref2.navigation;
    var user = navigation.getParam('user');
    return {
      headerTitle: _react3.default.createElement(
        _reactNative.Text,
        {
          style: _utils.Styles.header.title,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 32
          }
        },
        "Calendar"
      ),
      headerRight: _react3.default.createElement(
        _reactNative.View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35
          }
        },
        _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              navigation.navigate("NewTaskView", {
                updateTasks: navigation.getParam("updateTasks")
              });
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 36
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                paddingRight: 10
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 39
              }
            },
            _react3.default.createElement(_Ionicons2.default, {
              name: "md-add",
              size: 32,
              color: _utils.ColorTheme.lightGreen,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 40
              }
            })
          )
        )
      ),
      headerLeft: _react3.default.createElement(
        _reactNative.View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        },
        _react3.default.createElement(
          _reactNative.TouchableOpacity,
          {
            onPress: function onPress() {
              return navigation.dispatch(_reactNavigationDrawer.DrawerActions.openDrawer());
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 48
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                paddingLeft: 10
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            },
            _react3.default.createElement(_Ionicons2.default, {
              name: "ios-menu-outline",
              size: 32,
              color: _utils.ColorTheme.lightGreen,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 52
              }
            })
          )
        )
      )
    };
  }, _temp));

  var TaskItemView = _wrapComponent("TaskItemView")(function (_React$Component2) {
    _inherits(TaskItemView, _React$Component2);

    function TaskItemView() {
      _classCallCheck(this, TaskItemView);

      return _possibleConstructorReturn(this, (TaskItemView.__proto__ || Object.getPrototypeOf(TaskItemView)).apply(this, arguments));
    }

    _createClass(TaskItemView, [{
      key: "render",
      value: function render() {
        var _this5 = this;

        var marginDesc = new Date(this.props.item.date * 1000).getHours() < 10 ? 25 : 20;
        var done = this.props.item.completed == 1 ? {
          textDecorationLine: "line-through"
        } : {};
        var nextTaskStyle = this.props.nextTask == this.props.index ? {
          height: 100,
          padding: 0,
          backgroundColor: _utils.ColorTheme.lightLightGrey
        } : {};
        var swipeoutBtns = [{
          text: 'Delete',
          backgroundColor: 'red',
          onPress: function onPress() {
            _this5.props.deleteTask(_this5.props.item);
          }
        }, {
          text: 'Complete',
          onPress: function onPress() {
            _this5.props.updateTask(_this5.props.item, _this5.props.index);
          }
        }];
        return _react3.default.createElement(
          _reactNativeSwipeout2.default,
          {
            autoClose: true,
            style: {
              backgroundColor: _utils.ColorTheme.white
            },
            right: swipeoutBtns,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 192
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [_utils.Styles.tasks.item, nextTaskStyle],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 193
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: {
                  fontSize: 16
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 194
                }
              },
              " ",
              (0, _moment2.default)(this.props.item.date, 'X').format("HH:mm")
            ),
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: [done, {
                  marginLeft: marginDesc,
                  fontSize: 17
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 195
                }
              },
              this.props.item.name
            ),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: {
                  flex: 1,
                  flexDirection: "row",
                  justifyContent: "flex-end",
                  paddingRight: 15,
                  alignItems: "center",
                  alignContent: "center"
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 196
                }
              },
              this.props.loading ? _react3.default.createElement(_reactNative.ActivityIndicator, {
                size: "small",
                color: _utils.ColorTheme.lightGreen,
                style: {
                  paddingRight: 5,
                  paddingTop: 14.7,
                  paddingBottom: 14.7
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 198
                }
              }) : _react3.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  style: {
                    paddingRight: 5
                  },
                  onPress: function onPress() {
                    _this5.props.updateTask(_this5.props.item, _this5.props.index);
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 200
                  }
                },
                _react3.default.createElement(_Ionicons2.default, {
                  name: "ios-done-all-outline",
                  size: 45,
                  color: _utils.ColorTheme.lightGreen,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 201
                  }
                })
              )
            )
          ),
          _react3.default.createElement(_utils.Hr, {
            color: _utils.ColorTheme.lightGrey,
            lineHeight: 1,
            offset: 15,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 206
            }
          })
        );
      }
    }]);

    return TaskItemView;
  }(_react3.default.Component));

  var mapStateToProps = function mapStateToProps(state) {
    return {
      tasks: state.tasks,
      user: state.user
    };
  };

  exports.default = (0, _reactRedux.connect)(mapStateToProps, {
    updateTasks: _actions.taskActions.updateTasks
  })(Tasks);
});